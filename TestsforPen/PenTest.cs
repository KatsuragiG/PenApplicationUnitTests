using Microsoft.VisualStudio.TestTools.UnitTesting;
using Pen;
using System.IO;

namespace TestforPen

{
    [TestClass]
    public class PenTest
    {
        private int inkContainerValue = 1000;
        private double sizeLetter = 1.0;
        private string color = "red";

        //bug 1
        [TestMethod]
        public void checkGetColor()
        {
            var penColor = new PenClass(inkContainerValue, sizeLetter, color);
            string actual = penColor.getColor();
            Assert.AreEqual(actual, color, $"{actual} is not equal {color}");
        }

        [TestMethod]
        public void checkIsWorkMethod()
        {
            var value = 3;
            var actual = new PenClass(value).isWork();
            Assert.IsTrue(actual, "Value is not positiv");
        }

        [TestMethod]
        public void checkDoSomthingElse()
        {
            var penColor = new PenClass(inkContainerValue, sizeLetter, color);
            var path = "1.txt";
            penColor.doSomethingElse();
            StreamReader fileRead = new StreamReader(path);
            var expectedResult = fileRead.ReadToEnd().Trim();
            Assert.AreEqual(expectedResult, color, $"Color {expectedResult} is not equal {color} in text file");
        }

        [TestMethod]
        public void checkWriteMethodInkZero()
        {
            var inkContainerValueZero = 0;
            var word = "A";
            var penColor = new PenClass(inkContainerValueZero);
            var actualResult = penColor.write(word);
            Assert.AreEqual("", actualResult, "Pen is work without ink");
        }

        [TestMethod]
        public void checkWriteMethodInkFull()
        {
            var word = "Abc";
            var penColor = new PenClass(inkContainerValue, sizeLetter);
            var actualResult = penColor.write(word);
            Assert.AreEqual(word, actualResult, $"{word} is not equal {actualResult}");
        }

        [TestMethod]
        public void checkWriteMethodWithSizeLetter()
        {
            var word = "Abc";
            var sizeLetter = 1;
            var inkContainerValue = 1;
            var penColor = new PenClass(inkContainerValue, sizeLetter);
            var actualResult = penColor.write(word);
            Assert.AreEqual("A", actualResult, $"{word} is not equal {actualResult}");
        }

        [TestMethod]
        public void checkWriteMethodWithOnlyInkValue()
        {
            var word = "Ab";
            var sizeLetter = 0.5;
            var inkContainerValue = 1;
            var penColor = new PenClass(inkContainerValue, sizeLetter);
            var actualResult = penColor.write(word);
            Assert.AreEqual("Ab", actualResult, $"{word} is not equal {actualResult}");
        }

        //bug2
        [TestMethod]
        public void checkWriteMethodWithSizeletterBigger()
        {
            var word = "Ab";
            var sizeLetter = 11;
            var inkContainerValue = 10;
            var penColor = new PenClass(inkContainerValue, sizeLetter);
            var actualResult = penColor.write(word);
            Assert.AreEqual("", actualResult, "Pen is write word, when sizeLetter bigger than inkContainerValue");
        }

        //bug3
        [TestMethod]
        public void checkWriteMethodWithBigWord()
        {
            var word = "abcdef";
            var sizeLetter = 2;
            var inkContainerValue = 4;
            var penColor = new PenClass(inkContainerValue, sizeLetter);
            var actualResult = penColor.write(word);
            Assert.AreEqual("ab", actualResult, $"Pen is write {actualResult} word, when it should {"ab"}");
        }

        //bug4
        [TestMethod]
        public void checkWriteMethodWithSpaces()
        {
            var word = "a b c d e f ";
            var sizeLetter = 1;
            var inkContainerValue = 6;
            var penColor = new PenClass(inkContainerValue, sizeLetter);
            var actualResult = penColor.write(word);
            Assert.AreEqual(word, actualResult, $"Pen is write {actualResult} word, when it should {word}");
        }
    }
}